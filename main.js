// main.js — CodeSmith (simple client-side code generator)

const templates = {
  html: {
    "Boilerplate (HTML5)": `<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>{{project}}</title>
  <meta name="author" content="{{author}}">
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <h1>Hello — {{project}}</h1>
  <p>Generated by CodeSmith</p>
</body>
</html>`
  },
  css: {
    "Reset + Base": `/* {{project}} — style.css
Author: {{author}} */
*{box-sizing:border-box;margin:0;padding:0}
body{font-family:monospace;background:#071018;color:#dff5f7;padding:20px}
.container{max-width:1000px;margin:0 auto}`
  },
  js: {
    "Browser Starter": `// main.js — {{project}} (Generated)
document.addEventListener('DOMContentLoaded', ()=> {
  console.log("{{project}} loaded by {{author}}");
});`
  },
  python: {
    "Hello World": `# {{project}} — Python script
# Author: {{author}}
def main():
    print("Hello from {{project}}")

if __name__ == "__main__":
    main()`
  },
  java: {
    "Hello Java (Main class)": `// {{project}} — Java
// Author: {{author}}
public class Main {
    public static void main(String[] args) {
        System.out.println("Hello from {{project}}");
    }
}`
  },
  spring: {
    "Spring Boot Starter (Main)": `package com.example.{{projectLower}};

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class {{projectClass}}Application {
    public static void main(String[] args) {
        SpringApplication.run({{projectClass}}Application.class, args);
    }
}`
  },
  bash: {
    "Simple script": `#!/bin/bash
# {{project}} — script by {{author}}
echo "Running {{project}}..."
# add commands here`
  },
  sql: {
    "Schema Sample": `-- {{project}} — SQL schema
-- Author: {{author}}
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username VARCHAR(100) NOT NULL,
  email VARCHAR(200)
);`
  }
};

// helpers
function el(id){ return document.getElementById(id); }
const langSelect = el('langSelect');
const templateSelect = el('templateSelect');
const loadTemplateBtn = el('loadTemplate');
const generateBtn = el('generateBtn');
const copyBtn = el('copyBtn');
const downloadBtn = el('downloadBtn');
const previewBtn = el('previewBtn');
const codeArea = el('code');
const projectName = el('projectName');
const author = el('author');
const fileName = el('fileName');
const preview = el('preview');

// populate templates when language changes
function populateTemplates(){
  const lang = langSelect.value;
  templateSelect.innerHTML = '';
  const items = templates[lang] || {};
  Object.keys(items).forEach(k=>{
    const opt = document.createElement('option');
    opt.value = k; opt.textContent = k; templateSelect.appendChild(opt);
  });
}
langSelect.addEventListener('change', populateTemplates);
populateTemplates();

// utility replace placeholders
function renderTemplate(tpl){
  const now = new Date();
  const data = {
    project: projectName.value || 'MyProject',
    projectLower: (projectName.value||'myproject').toLowerCase().replace(/\s+/g,''),
    projectClass: (projectName.value||'MyProject').replace(/\W+/g,''),
    author: author.value || 'Anonymous',
    date: now.toISOString().slice(0,10)
  };
  return tpl.replace(/\{\{(\w+)\}\}/g, (_, key)=> data[key] || '');
}

// load template into editor
loadTemplateBtn.addEventListener('click', ()=>{
  const lang = langSelect.value;
  const tName = templateSelect.value;
  if(!tName){ alert('اختر قالباً أولاً'); return; }
  const tpl = templates[lang][tName];
  codeArea.value = renderTemplate(tpl);
  updateFileName();
});

// generate file (same as load but ensures filename)
generateBtn.addEventListener('click', ()=>{
  if(!codeArea.value.trim()){ alert('المحرر فارغ — حمل قالب أو اكتب كود'); return; }
  updateFileName();
  alert('تم توليد الكود في المحرر — انسخ أو نزّل الملف');
});

// update filename display based on language
function updateFileName(){
  const lang = langSelect.value;
  let ext = 'txt';
  if(lang==='html') ext='html';
  if(lang==='css') ext='css';
  if(lang==='js') ext='js';
  if(lang==='python') ext='py';
  if(lang==='java' || lang==='spring') ext='java';
  if(lang==='bash') ext='sh';
  if(lang==='sql') ext='sql';
  const name = (projectName.value || 'project') + '.' + ext;
  fileName.textContent = name;
}

// copy to clipboard
copyBtn.addEventListener('click', async ()=>{
  try{
    await navigator.clipboard.writeText(codeArea.value);
    alert('تم النسخ للحافظة');
  }catch(e){
    alert('فشل النسخ — افتح الموقع على متصفح يدعم Clipboard API');
  }
});

// download as file
downloadBtn.addEventListener('click', ()=>{
  const blob = new Blob([codeArea.value], {type:'text/plain;charset=utf-8'});
  const a = document.createElement('a');
  a.href = URL.createObjectURL(blob);
  const lang = langSelect.value;
  let ext = 'txt';
  if(lang==='html') ext='html';
  if(lang==='css') ext='css';
  if(lang==='js') ext='js';
  if(lang==='python') ext='py';
  if(lang==='java' || lang==='spring') ext='java';
  if(lang==='bash') ext='sh';
  if(lang==='sql') ext='sql';
  const name = (projectName.value || 'project') + '.' + ext;
  a.download = name;
  document.body.appendChild(a);
  a.click();
  a.remove();
});

// preview HTML
previewBtn.addEventListener('click', ()=>{
  if(langSelect.value !== 'html'){ alert('المعاينة تعمل فقط لملفات HTML'); return; }
  const blob = new Blob([codeArea.value], {type:'text/html'});
  const url = URL.createObjectURL(blob);
  preview.innerHTML = `<iframe src="${url}" style="width:100%;height:100%;border:0;background:white"></iframe>`;
});

// auto update filename when project name or language changes
projectName.addEventListener('input', updateFileName);
langSelect.addEventListener('change', updateFileName);

// init defaults
projectName.value = 'MyProject';
author.value = 'Malek';
populateTemplates();
templateSelect.selectedIndex = 0;
loadTemplateBtn.click();
updateFileName();
